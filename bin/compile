#! /bin/bash

set -o errexit    # always exit on error
set -o errtrace   # trap errors in functions as well
set -o pipefail   # don't ignore exit codes when piping output
set -o posix      # more strict failures in subshells

# parse and derive params
build_dir=$1
cache_dir=$2
pkg_name=imagemagick
heroku_dir=$build_dir/.heroku
deploy_dir=$heroku_dir/$pkg_name
profile_dir="$build_dir/.profile.d"
bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load dependencies
source $bp_dir/configs.sh
source $bp_dir/lib/func.sh

if [ -n "${IMAGEMAGICK_PACKAGE_URL}" ]; then
  package_url="${IMAGEMAGICK_PACKAGE_URL}"
fi

echo "Initialize ImageMagick buildpack" | arrow
echo "BUILD_DIR   : ${build_dir}" | indent
echo "CACHE_DIR   : ${cache_dir}" | indent
echo "profile_dir : ${profile_dir}" | indent

echo "Installing ${package_url##*/}" | arrow
echo "${package_url}" | indent
#tmp_dir=$(tgz "${package_url}")
tmp_dir=$(tgz_download "${package_url}")
#echo "${tmp_dir}" | indent
echo "Download completed" | indent

mkdir -p "${deploy_dir}"
echo "Installation completed" | indent
cd "${tmp_dir}"
cd ImageMagick*
pwd
ls -al
./configure --with-jpeg=yes --with-magick-plus-plus=yes  --with-png=yes --with-rsvg=yes --prefix="${deploy_dir}"
make
make install
echo "Installation completed" | indent

echo "Building runtime environment for imagemagick" | arrow
mkdir -p "${profile_dir}"
cat "${bp_dir}/lib/profile.sh" > "${profile_dir}/${pkg_name}.sh"

if [ -n "${PKG_CONFIG_PATH}" ]; then
  export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:${deploy_dir}/lib/pkgconfig
else
  export PKG_CONFIG_PATH=${deploy_dir}/lib/pkgconfig
fi

